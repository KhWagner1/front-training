<?php  //ТО С ЧЕГО НАЧИНАЕТСЯ ФАЙЛ
//---------------------------------------------------------------------------------------------------------------------------//


//ПЕРЕМЕННЫЕ

# echo 2+2 // ВЫВОД ТЕКСТА НА ЭКРАН
# include // ПОДКЛЮЧЕНИЕ ФАЙЛА ---> ЕСЛИ ФАЙЛ ОТСТУТСТВУЕТ КОД ПРОДОЛЖИТ РАБОТАТЬ
# require // ПОДКЛЮЧЕНИЕ ФАЙЛА ---> ЕСЛИ ФАЙЛ ОТСТУТСТВУЕТ КОД ОСТАНОВИТЬСЯ
# из-за слабой типизации в одну ячейку памяти можно положить и строку и цифру // $str = 'stroka'; echo $str; $str = 2; echo $str


//---------------------------------------------------------------------------------------------------------------------------//


//ТИПЫ ДАННЫХ

# $int = 1234 // десятичное число
# $int = +1234 // десятичное число
# $int = -1234 // отрицательно число
# $int = 0123 // восьмеричное число
# $int = 0x1A // шестнадцатиричное число


# 'Hello world ---> '$num1' // не выведет число с переменной
# "Hello world ---> "$num1" // выведет число с переменной

# integer ---> 123 // цельные числа
# float ---> 3.14 // десятичные числа
# boolead ---> true, false // логические типы данных
# array ---> массивы // array( 'body' => 'footer' ); echo array;
# oject ---> метод обработки // ПОКА НЕ ТРОГАЮ!!!
# resourse ---> указание на соеденение (БД) // ПОКА НЕ ТРОГАЮ!!!

# var_dump($выводит результат кода и тип данных);



// КОНСТАНТА

# define("pi", 3.14);  // назначать можно только один раз для одной переменной и всегда по аналогии --->  define("переменная", значение)
# echo pi;



// ОТЛАДКА

# $dog = array(
#    'dog' => 'buldog',
#    'car' => 'audi',
#    'bar' => 'alkobot',
# );
# print_r($dog); // отладка для кода ---> print_r


//---------------------------------------------------------------------------------------------------------------------------//


// КОНСТРУКЦИИ ПЕРЕМЕННЫХ ---> callback

# isset()  // проверяет существующюю переменную ---> $var1 = 1234; echo empty(var1); - результат: 1
# empty() // проверяет несуществующюю переменную ---> $var1 = 1234; echo empty(var2); - результат: 1
# unset() // переменную снесёт
# gettype()  // определяет тип переменной


//---------------------------------------------------------------------------------------------------------------------------//


// ОПЕРАТОРЫ



// Условные операторы

# $x = 10;
# $x = $x > 0 ? $x + 40 : $x;  // условный оператор ---> если x>10 ? то x+40 выводим: x
# echo $x;



// Операторы присваивания

# $x = 'Hello world';
# $x .= '!!!';  // присвоили строчку ---> result: hello world!!!

# $x = 'Hello world'. '!!!'; // присвоили строчку ---> result: hello world!!!

# $num = 5234654;
# $x = "hello {$num} word"; // присвоили строчку ---> result: hello 5234654 world
# echo $x;

# $a = 3;
# $b = &$a; // $b - это ссылка на $a, даже если переменная поменяется, всё равно $b будет принимать значение $a
# print "$a\n";
# print "$b\n";
# $a = 4;
# print "$a\n"; 
# print "$b\n"; 



// Операторы побитового присваивания

# & ---> И
# | ---> ИЛИ
# ^ ---> исключение ИЛИ
# << ---> сдвиг в ЛЕВО
# >> --->  сдвиг в ПРАВО
# ?? ---> объеденение с NULL



// Операторы сравнения 

# $a == $b	// Равно	true если $a равно $b после преобразования типов.                       //так же работает с array
# $a === $b	// Тождественно равно	true если $a равно $b и имеет тот же тип.               //так же работает с array
# $a != $b	// Не равно	true если $a не равно $b после преобразования типов.               //так же работает с array
# $a <> $b	// Не равно	true если $a не равно $b после преобразования типов.              //так же работает с array
# $a !== $b	// Тождественно не равно	true если $a не равно $b, или они разных типов.   //так же работает с array
# $a < $b	// Меньше	true если $a строго меньше $b.
# $a > $b	// Больше	true если $a строго больше $b.
# $a <= $b	// Меньше или равно	true если $a меньше или равно $b.
# $a >= $b	// Больше или равно	true если $a больше или равно $b.


//Логические операторы

#  !$a Отрицание true, если $a не true. 
#  $a && $b И true, если и $a, и $b true. 
#  $a || $b Или true, если или $a, или $b true. 


//---------------------------------------------------------------------------------------------------------------------------//

// УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ (ПО РУССКИ УСЛОВНЫЕ ОПЕРАТОРЫ)

# if (){ // конструкция if и остальных условных операторов}
# elseif // конструкция elseif аналогична конструкции if
# else // конструкция пишется следующим образом ---> else {echo;}
# while // конструкция следующая ---> while(значение) {функция;}


// if, elseif, else;

# $a = 24;
# $b = 24;
# if ($a > $b) {
#    echo "a больше, чем b";
# } elseif ($a == $b) {
#    echo "a равен b";
# } else {
#    echo "a меньше, чем b";
# }


// while


# $w = 10;
# while ($w <= 1000) {                 // задаём максимальное число для цикла while
#    echo "Number is: $w <br>";       // выводим на экран с переменной, которую изменяет while и переносим её на новую строчку
#    $w += 5;                        // с каждым циклом на сколько раз будет увеличиваться число
# }

# $i = 1000;
# while ($i >= 0) {
#    echo "$i <br>";
#    $i -= 7;
# }



//do while

# $i = 12;
# do {
#    echo "<br>" . $i *= 5;
# } while ($i++ < 650);



//for

# for ($x = 8; $x ++<100;) {  // переменная x=8 и увеличивается до 100
#    echo "<br> $x";
# }



// function

# function myFunc9($srl)       // функция(переменнная функции)
# {
#    return $srl + $srl;      // возвращает значение в функции
# }
#
# echo myFunc9();            // вызов функции

//---------------------------------------------------------------------------------------------------------------------------//

// Массивы - углубление

#   reset($a); // на начало
#   end($a); // на конец
#   key($a); // выбор ключа массива current($z); // выдаёт значение по ключу массива
#   next($a); // на эллемент ниже сдаёт
#   prev($a); // на эллемент выше

#   array_push(); добавить в конец
#   array_pop(); глянуть
#   array_shift(); выдерает первый  //unshift ---> неасколько


#   while (null !== ($key = key($a))) {
#      echo $key . '=>' . current($a) . "<br>";
#      next($a);
#   }                              // вывод полного массиво от начала до конца



#   // forech

#   foreach ($a as $value) {           //выбор только значения без ключей 
#      echo $value;
#   }


#   foreach ($a as &$value) {           //выбор только значения без ключей &$value - ссылка на массив и ковыряние внутри
#      $value+=1;
#   }


#   foreach ($a as $key => $value) {           //выбор значение с ключами
#      echo $key .'=>'. $value;
#   }


//---------------------------------------------------------------------------------------------------------------------------//

// PRCE - регулярные выражения 

# . - ищем 1 любой другой символ после буквы.  К ПРИМЕРУ НАМ НАДО ИСКАТЬ И БОЛЬШУЮ И МАЛЕНЬКУЮ БУКВУ, Т.К. PRCE ЧУВСТВИТЕЛЕН К РЕГИСТРАМ
# [Ii]. - ищет I, i, и любой другой символ
# [a-c] - диапозон поиска
# \+ - экранирование плюса
# ^ - поиск от самого начала строки
# ^[^b] - начало строки кроме б
# $ поиск от конца строки
# \d - любая цифра
# \D - кроме цифр
# \s - любой пробел
# \S - кроме пробел
# \w - буква
# \W - кроме буквы
# \b - граница слова
# \B - не граница слова
# \A	- начало строки
# \Z	- конец строки
# {кол-во повторяющихся раз}
# ab* (будет искать с a,b если не будет одной из буквы, то искать будет)
# ab+ (будет искать с a,b если не будет одной из буквы, то искать НЕ будет)
# (группировка|gdfgdgf) - либо то, либо то
# \w+ - нн-ое кол-во символов 

//---------------------------------------------------------------------------------------------------------------------------//

//ООП!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


# Область значения объектов ООП

# public       -  даёт полный доступ к свойству и методы, из любой точки программы
# private      -  запрещает использование свойства или метода, кроме как внутри класса и объекта.
# protected    -  нельзя использовать вне своего класса выводит ошибку и в наследованном тоже


# Вывод объекта на экран

# СПОСОБ НОМЕР 1  - ЧЕРЕЗ МЕТОДЫ

#     class krushka
#     {
#        public $color;                                    //св-ва
#        public $form;                                     //св-ва
#        public $obem;                                     //св-ва
#     
#        public function setColor($value)                  // метод 
#        {
#           $this->color = $value;                         // значение вписывается на выхлопе
#        }
#        public function getColor()                        // метод 
#        {
#           return $this->color;                           //содержание значения 
#        }
#     }
#     $krushka = new krushka();                            //создание класса
#     
#     $krushka->setColor("Чёрная");                        // НЕнужно так делать
#     echo $krushka->color;                                // НЕнужно так делать
#     $krushka->setColor('Чёрная');                        // вписывание значения
#     echo $krushka->getColor();                           // вывод значение 



#СПОСОБ НОМЕР 2 - НАПРЯМУЮ С ЗНАЧЕНИЙ

#
#      class krushka
#      {
#         public $color;
#         public $form;
#         public $obem;
#      }
#      $color1 = new krushka();
#      $color2 = new krushka();
#      $color3 = new krushka();
#      $color1->color = 'Чёрная';
#      $color2->color = 'Белая';
#      $color3->color = 'Зелёная';
#      echo $color1->color . '   ' . $color2->color . '   ' . $color3->color;



# СПОСОБ НОМЕР 3 - через возвращение функции

#        class people
#        {
#           public $name;
#           public $surname;
#           
#           public function setPrint()
#           {
#              return $this->name . $this->surname;
#           }
#        }
#        $peop1 = new people();
#        $peop2 = new people();
#        $peop3 = new people();
#        $peop1->name = 'Ivan';
#        $peop1->surname = 'Ivanov';
#        $peop2->name = 'Pavel';
#        $peop2->surname = 'Pavlov';
#        echo $peop1->name . ' ' . $peop1->surname . "<br>" . $peop2->name . ' ' . $peop2->surname . "<br>";



# Магические методы - конструктор и деструктор

#        class objMagic
#        {
#           public $name;
#           public $surname;
#        
#           public function __construct()    //магический метод - который хранит в себе переменые
#           {
#              print "User:" . ' ';
#              $this->name = 'Уничтожен';
#           }
#           public function __destruct()     //магический метод - который удаляет переменные
#           {
#              print "User: " . $this->name;   //какую именно переменную удаляем
#           }
#        }
#        $magic = new objMagic();



//---------------------------------------------------------------------------------------------------------------------------//

//Файлы .ini 


#        file_get_contents()  - читает содержимое файла
#        file_put_contents()  - пишет данные в файл
#        file_exists()        - проверяет существование файла
#        
#        Обработка переменных
#        
#        unserialize()   - создаёт php хранилище в файле .ini
#        serialize()     - генерирует переменные информацию о текущем пользователе в session



//---------------------------------------------------------------------------------------------------------------------------//

# $_COOKIE  - в отличии от sessia, куки хранаяться в браузере пользователя

#       setcookie('name', 'Dmitriy', time() + 86400 * 30 * 12);     // устанавливаем куки (параметр, значение, время - 1г)
#       if (isset($_COOKIE)) {                                      // если куки установлены, то
#          echo "Куки установлены";                                 // выводим сообщение
#       } else "Куки не установлены";                               // иначе выводим сообщение

# Удаление Cookie

#        setcookie('name', time() -время)
#        setcookie('name', '')




//---------------------------------------------------------------------------------------------------------------------------//

# $_SESSION - индивидуальные данные клиента, которые находятся исключительно на сервере

#        session_start();
#        
#        $_SESSION["name"] = 'Dmitriy';
#        $_SESSION["subname"] = 'Bakhmatov';
#        $_SESSION["random"] = [12, 213, 'abd', 432];
#        echo '<pre>';
#        print_r($_SESSION);
#        echo '</pre>';
#        
#        session_reset();       // удаление сессии
#        session_destroy();     // сессия останавливается




// SQL

//---------------------------------------------------------------------------------------------------------------------------//

#        Добовление данных в таблицу Insert

#        ($connect, "INSERT INTO `regup` (`id`, `surname`, `name`, `email`, `login`, `password`)            // Значения данных
#                                 VALUES (NULL, '$surname', '$name', '$mail', '$login', '$password')");     // Занесение данных
#        $sql = ($connect, "INSERT INTO `regup` (`id`, `surname`, `name`, `email`, `login`, `password`)            
#                                 VALUES (NULL, '$surname', '$name', '$mail', '$login', '$password')");     
#        $sql .= ($connect, "INSERT INTO `regup` (`id`, `surname`, `name`, `email`, `login`, `password`)    // Добавка данных
#                                 VALUES (NULL, '$surname', '$name', '$mail', '$login', '$password')");     // Занесение данных
#        $sql = ($connect, "INSERT INTO `regup` (`id`, `surname`, `name`, `email`, `login`, `password`)            
#                                 VALUES (NULL, '$surname', '$name', '$mail', '$login', '$password')"); 
#                                        (NULL, '$surname', '$name', '$mail', '$login', '$password')");     // Занесение нескольких значений        



#        Выборка SELECT

#        Select * FROM `regup`               // Выбирает все значения из таблицы REGUP
#        Select nm AS name FROM `regup`      // nm меняется в резултате на name             // АЛИАС
#        WHERE id > 5                        // Переберает значения, которые буду больше 5
#        WHERE id > 5 AND id < 15            // Переберает значения, которые буду больше 5 и меньше 15
#        WHERE id BETWEEN 5 AND 10           // Перебирает значения от 5 до 10
#        WHERE id IN (5, 10 )                // Перебирает 5 и 10
#        WHERE id NOT IN (5, 10 )            // Перебирает КРОМЕ 5 и 10
#        WHERE name="dmitriy"                // Перебирает всех Дмитриев


#        Оператор Order
#        ORDER BY summa DESC                 // сортирует по убыванию
#        ORDER BY summa ABS                  // сортирует по возврастанию
#        ORDER BY summa ABS, name DESC       // сортирует по возврастанию сумму и по убыванию название


#        Оператор Like
#        LIKE 'iPhone%'                      // С любым значением далее
#        LIKE 'iPhone_'                      // С любым одиночным символом


#        Оператор REGEX
#        REGEXP 'Phone|Galaxy'               // Или то или это


#        Оператор IS NULL
#        WHERE summa IS NULL                 // Выводятся суммы с нулевым значением



#        Замена данных в таблице Update

#         "UPDATE `regup` SET name='Дмытро' WHERE name='Дмитрий'";         // Имя Дмитрий меняется на Дмытро
#         "REPLACE INTO `regup` VALUE (10, 'asdfg', 'sadfh', 'asdfgh')";   // В 10-ом айдишнике все данные заменятся на эти



#        Удаление данных из таблицы Delete

#         "DELETE FROM `regup` WHERE name='Dima'";      // Удаляется все значения с параметром Dima
#         "DELETE FROM `regup` LIMIT 3";                // Удаляются первые два таблицы
#         "TRUNCATE TABLE `regup`";                     // Удаление всех данных с таблицы



#        УСЛОВНЫЕ ОПЕРАТОРЫ

#        Case

#        "SELECT ProductName, ProductCount,          //Выбираются 2 значения из таблы
#        CASE                                        
#            WHEN ProductCount = 1                   // Если товар 1, то товар закончился
#                THEN 'Товар заканчивается'
#            WHEN ProductCount = 2                   // Если товара 2, то тогда его мало
#                THEN 'Мало товара'
#            WHEN ProductCount = 3                   // Если товара 3, то он есть в наличии
#                THEN 'Есть в наличии'
#            ELSE 'Много товара'                     // В остальном, его много
#        END AS Category               
#        FROM Products";                             // В табле продукты


#        IF

#        IF(ProductCount > 3, 'Много товара', 'Мало товара')     // Если товара больше 3-х, то его много, а если меньше, то мало

//---------------------------------------------------------------------------------------------------------------------------//

// Глянуть .htaccass

// Суперглобальные массивы, научиться работать с $_SERVER;

// Сокеты для чатов и видеопотоков, что бы держаться постоянное соединение с сервером

// css baseline64

// parseurl

// GD

// phpinfo - данные сервака

// iconv - библиотека конвертации кодировки

// openssl - Безопасность сервака

// file zilla - ftp в ftp всегда ставить пассив режим,
// ...что бы передача фалов с ftp на сервак и обратно передаваласьодним портом
// атрибуты ftp - chmod
// файлы - 644
// папки - 755
// web master ya.ru
